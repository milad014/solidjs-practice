import { TSESLint, TSESTree as T } from "@typescript-eslint/utils";
import { ProgramOrFunctionNode } from "../../utils";
interface TrackedScope {
    node: T.Node;
    expect: "tracked-scope" | "called-function";
}
export interface VirtualReference {
    reference: TSESLint.Scope.Reference | T.Node;
    declarationScope: ReactivityScope;
}
export declare class ReactivityScope {
    node: ProgramOrFunctionNode;
    parentScope: ReactivityScope | null;
    constructor(node: ProgramOrFunctionNode, parentScope: ReactivityScope | null);
    childScopes: Array<ReactivityScope>;
    trackedScopes: Array<TrackedScope>;
    errorContexts: Array<T.Node>;
    references: Array<VirtualReference>;
    hasJSX: boolean;
    deepestScopeContaining(node: T.Node | T.Range): ReactivityScope | null;
    isDeepestScopeFor(node: T.Node | T.Range): boolean;
    walk(): Iterable<ReactivityScope>;
    private iterateUpwards;
}
export {};
