"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactivityScope = void 0;
function isRangeWithin(inner, outer) {
    return inner[0] >= outer[0] && inner[1] <= outer[1];
}
class ReactivityScope {
    constructor(node, parentScope) {
        this.node = node;
        this.parentScope = parentScope;
        this.childScopes = [];
        this.trackedScopes = [];
        this.errorContexts = [];
        this.references = [];
        this.hasJSX = false;
    }
    deepestScopeContaining(node) {
        const range = Array.isArray(node) ? node : node.range;
        if (isRangeWithin(range, this.node.range)) {
            const matchedChildRange = this.childScopes.find((scope) => scope.deepestScopeContaining(range));
            return matchedChildRange !== null && matchedChildRange !== void 0 ? matchedChildRange : this;
        }
        return null;
    }
    isDeepestScopeFor(node) {
        return this.deepestScopeContaining(Array.isArray(node) ? node : node.range) === this;
    }
    *walk() {
        yield this;
        for (const scope of this.childScopes) {
            yield* scope.walk();
        }
    }
    *iterateUpwards(prop) {
        yield* prop(this);
        if (this.parentScope) {
            yield* this.parentScope.iterateUpwards(prop);
        }
    }
}
exports.ReactivityScope = ReactivityScope;
