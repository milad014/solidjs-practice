import type { TSESTree as T, TSESLint } from "@typescript-eslint/utils";
import { FunctionNode } from "../../utils";
declare type PathSegment = `[${number}]`;
export declare type ExprPath = PathSegment;
export interface ReactivityPluginApi {
    calledFunction(node: T.Node): void;
    trackedScope(node: T.Node): void;
    syncCallback(node: FunctionNode): void;
    provideErrorContext(node: T.Node, errorMessage: string): void;
    signal(node: T.Node, path?: ExprPath): void;
    store(node: T.Node, path?: ExprPath, options?: {
        mutable?: boolean;
    }): void;
    reactive(node: T.Node, path?: ExprPath): void;
    isCall(node: T.Node, primitive?: string | Array<string>): node is T.CallExpression;
}
export interface ReactivityPlugin {
    package: string;
    create: (api: ReactivityPluginApi) => TSESLint.RuleListener;
}
export declare function plugin(p: ReactivityPlugin): ReactivityPlugin;
export {};
