'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('solid-forms/core');
var web = require('solid-js/web');
var solidJs = require('solid-js');

function withControl(options) {
  const prefix = options.classListPrefix || "sf";

  const wrappedComponent = props => {
    const control = solidJs.createMemo(() => props.control || solidJs.createRoot(() => options.controlFactory(props)));
    const controlClassList = solidJs.createMemo(() => createClassList(control(), prefix));
    const Component = options.component;
    return web.createComponent(Component, web.mergeProps(props, {
      get control() {
        return control();
      },

      controlClassList: controlClassList
    }));
  };

  wrappedComponent.control = options.controlFactory;
  return wrappedComponent;
}
function createClassList(control, prefix = "sf") {
  return {
    [`${prefix}-control-container`]: core.isAbstractControlContainer(control),
    [`${prefix}-valid`]: control.isValid,
    [`${prefix}-invalid`]: !control.isValid,
    [`${prefix}-dirty`]: control.isDirty,
    [`${prefix}-not-dirty`]: !control.isDirty,
    [`${prefix}-touched`]: control.isTouched,
    [`${prefix}-untouched`]: !control.isTouched,
    [`${prefix}-pending`]: control.isPending,
    [`${prefix}-not-pending`]: !control.isPending,
    [`${prefix}-disabled`]: control.isDisabled,
    [`${prefix}-enabled`]: !control.isDisabled,
    [`${prefix}-editable`]: !control.isReadonly,
    [`${prefix}-readonly`]: control.isReadonly,
    [`${prefix}-optional`]: !control.isRequired,
    [`${prefix}-required`]: control.isRequired,
    [`${prefix}-submitted`]: control.isSubmitted,
    [`${prefix}-not-submitted`]: !control.isSubmitted
  };
}

exports.createClassList = createClassList;
exports.withControl = withControl;
Object.keys(core).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return core[k]; }
  });
});
//# sourceMappingURL=index.common.js.map
