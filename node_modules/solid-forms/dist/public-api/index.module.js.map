{"version":3,"file":"index.module.js","sources":["../../src/withControl.tsx"],"sourcesContent":["import {\n  Accessor,\n  Component,\n  createMemo,\n  createRoot,\n  JSX,\n  ParentProps,\n} from \"solid-js\";\nimport {\n  isAbstractControlContainer,\n  type IAbstractControl,\n} from \"solid-forms/core\";\n\ntype WithControlProps<\n  Props,\n  ControlFactory extends (...args: [any, ...any[]]) => IAbstractControl\n> = ParentProps<\n  Props &\n    (Parameters<ControlFactory>[number] extends never\n      ? {}\n      : Parameters<ControlFactory>[0] extends undefined\n      ? {}\n      : Parameters<ControlFactory>[0])\n>;\n\nexport interface IWithControlOptions<\n  Props extends {},\n  ControlFactory extends (...args: [any, ...any[]]) => IAbstractControl\n> {\n  controlFactory: ControlFactory;\n  component: Component<\n    WithControlProps<Props, ControlFactory> & {\n      control: ReturnType<ControlFactory>;\n      /**\n       * Accessor returning a Solidjs classList for common form\n       * control classes. By default it looks like:\n       *\n       * ```ts\n       * {\n       *   \"sf-control-container\": isAbstractControlContainer(control),\n       *   \"sf-valid\": control.isValid,\n       *   \"sf-invalid\": !control.isValid,\n       *   \"sf-dirty\": control.isDirty,\n       *   \"sf-not-dirty\": !control.isDirty,\n       *   \"sf-touched\": control.isTouched,\n       *   \"sf-untouched\": !control.isTouched,\n       *   \"sf-pending\": control.isPending,\n       *   \"sf-not-pending\": !control.isPending,\n       *   \"sf-disabled\": control.isDisabled,\n       *   \"sf-enabled\": !control.isDisabled,\n       *   \"sf-editable\": !control.isReadonly,\n       *   \"sf-readonly\": control.isReadonly,\n       *   \"sf-optional\": !control.isRequired,\n       *   \"sf-required\": control.isRequired,\n       *   \"sf-submitted\": control.isSubmitted,\n       *   \"sf-not-submitted\": !control.isSubmitted,\n       * }\n       * ```\n       *\n       * Usage example:\n       *\n       * ```tsx\n       * const MyInput = withControl({\n       *   controlFactory: () => { ... },\n       *   component: (props) => {\n       *     return (\n       *       <div classList={props.classList()}>\n       *         <input\n       *           value={props.control.value}\n       *           ...etc\n       *         />\n       *       </div>\n       *     )\n       *   }\n       * })\n       * ```\n       */\n      controlClassList: Accessor<ReturnType<typeof createClassList>>;\n    }\n  >;\n  /**\n   * Supply a custom prefix instead of `\"sf\"` for the `controlClassList`\n   * property passed to the `component`.\n   */\n  classListPrefix?: string;\n}\n\nexport type WithControlReturnType<\n  Props extends {},\n  ControlFactory extends (...args: [any, ...any[]]) => IAbstractControl\n> = ((\n  props: WithControlProps<Props, ControlFactory> & {\n    control?: ReturnType<ControlFactory>;\n  }\n) => JSX.Element) & {\n  /**\n   * Factory function to build the component's default form control.\n   * Note, you can pass any form control to the component which\n   * satisfies the component's interface. You do not need to use\n   * this factory function.\n   *\n   * Example usage:\n   * ```ts\n   * const TextInput = withControl({\n   *   // etc...\n   * });\n   *\n   * createFormGroup({\n   *   street: TextInput.control(),\n   *   city: TextInput.control(),\n   *   state: TextInput.control(),\n   *   zip: TextInput.control(),\n   * })\n   * ```\n   */\n  control: ControlFactory;\n};\n\nexport function withControl<\n  Props extends {},\n  ControlFactory extends (...args: [any, ...any[]]) => IAbstractControl\n>(\n  options: IWithControlOptions<Props, ControlFactory>\n): WithControlReturnType<Props, ControlFactory> {\n  const prefix = options.classListPrefix || \"sf\";\n\n  const wrappedComponent: WithControlReturnType<Props, ControlFactory> = (\n    props\n  ) => {\n    const control = createMemo(\n      () =>\n        props.control ||\n        createRoot(\n          () => options.controlFactory(props) as ReturnType<ControlFactory>\n        )\n    );\n\n    const controlClassList = createMemo(() =>\n      createClassList(control(), prefix)\n    );\n\n    const Component = options.component;\n\n    return (\n      <Component\n        {...props}\n        control={control()}\n        controlClassList={controlClassList}\n      />\n    );\n  };\n\n  wrappedComponent.control = options.controlFactory;\n\n  return wrappedComponent;\n}\n\nexport function createClassList(control: IAbstractControl, prefix = \"sf\") {\n  return {\n    [`${prefix}-control-container`]: isAbstractControlContainer(control),\n    [`${prefix}-valid`]: control.isValid,\n    [`${prefix}-invalid`]: !control.isValid,\n    [`${prefix}-dirty`]: control.isDirty,\n    [`${prefix}-not-dirty`]: !control.isDirty,\n    [`${prefix}-touched`]: control.isTouched,\n    [`${prefix}-untouched`]: !control.isTouched,\n    [`${prefix}-pending`]: control.isPending,\n    [`${prefix}-not-pending`]: !control.isPending,\n    [`${prefix}-disabled`]: control.isDisabled,\n    [`${prefix}-enabled`]: !control.isDisabled,\n    [`${prefix}-editable`]: !control.isReadonly,\n    [`${prefix}-readonly`]: control.isReadonly,\n    [`${prefix}-optional`]: !control.isRequired,\n    [`${prefix}-required`]: control.isRequired,\n    [`${prefix}-submitted`]: control.isSubmitted,\n    [`${prefix}-not-submitted`]: !control.isSubmitted,\n  };\n}\n"],"names":["withControl","options","prefix","classListPrefix","wrappedComponent","props","control","createMemo","createRoot","controlFactory","controlClassList","createClassList","Component","component","_$createComponent","isAbstractControlContainer","isValid","isDirty","isTouched","isPending","isDisabled","isReadonly","isRequired","isSubmitted"],"mappings":";;;;;AAsHO,SAASA,WAAT,CAILC,OAJK,EAKyC;AAC9C,EAAA,MAAMC,MAAM,GAAGD,OAAO,CAACE,eAAR,IAA2B,IAA1C,CAAA;;EAEA,MAAMC,gBAA8D,GAClEC,KADqE,IAElE;AACH,IAAA,MAAMC,OAAO,GAAGC,UAAU,CACxB,MACEF,KAAK,CAACC,OAAN,IACAE,UAAU,CACR,MAAMP,OAAO,CAACQ,cAAR,CAAuBJ,KAAvB,CADE,CAHY,CAA1B,CAAA;AAQA,IAAA,MAAMK,gBAAgB,GAAGH,UAAU,CAAC,MAClCI,eAAe,CAACL,OAAO,EAAR,EAAYJ,MAAZ,CADkB,CAAnC,CAAA;AAIA,IAAA,MAAMU,SAAS,GAAGX,OAAO,CAACY,SAA1B,CAAA;IAEA,OACGC,eAAA,CAAA,SADH,aAEQT,KAFR,EAAA;AAAA,MAAA,IAGI,OAHJ,GAAA;AAAA,QAAA,OAGaC,OAAO,EAHpB,CAAA;AAAA,OAAA;;AAII,MAAA,gBAJJ,EAIsBI,gBAAAA;AAJtB,KAAA,CAAA,CAAA,CAAA;GAjBF,CAAA;;AA0BAN,EAAAA,gBAAgB,CAACE,OAAjB,GAA2BL,OAAO,CAACQ,cAAnC,CAAA;AAEA,EAAA,OAAOL,gBAAP,CAAA;AACD,CAAA;AAEM,SAASO,eAAT,CAAyBL,OAAzB,EAAoDJ,MAAM,GAAG,IAA7D,EAAmE;EACxE,OAAO;AACL,IAAA,CAAE,GAAEA,MAAO,CAAA,kBAAA,CAAX,GAAiCa,0BAA0B,CAACT,OAAD,CADtD;AAEL,IAAA,CAAE,GAAEJ,MAAO,CAAA,MAAA,CAAX,GAAqBI,OAAO,CAACU,OAFxB;AAGL,IAAA,CAAE,GAAEd,MAAO,CAAA,QAAA,CAAX,GAAuB,CAACI,OAAO,CAACU,OAH3B;AAIL,IAAA,CAAE,GAAEd,MAAO,CAAA,MAAA,CAAX,GAAqBI,OAAO,CAACW,OAJxB;AAKL,IAAA,CAAE,GAAEf,MAAO,CAAA,UAAA,CAAX,GAAyB,CAACI,OAAO,CAACW,OAL7B;AAML,IAAA,CAAE,GAAEf,MAAO,CAAA,QAAA,CAAX,GAAuBI,OAAO,CAACY,SAN1B;AAOL,IAAA,CAAE,GAAEhB,MAAO,CAAA,UAAA,CAAX,GAAyB,CAACI,OAAO,CAACY,SAP7B;AAQL,IAAA,CAAE,GAAEhB,MAAO,CAAA,QAAA,CAAX,GAAuBI,OAAO,CAACa,SAR1B;AASL,IAAA,CAAE,GAAEjB,MAAO,CAAA,YAAA,CAAX,GAA2B,CAACI,OAAO,CAACa,SAT/B;AAUL,IAAA,CAAE,GAAEjB,MAAO,CAAA,SAAA,CAAX,GAAwBI,OAAO,CAACc,UAV3B;AAWL,IAAA,CAAE,GAAElB,MAAO,CAAA,QAAA,CAAX,GAAuB,CAACI,OAAO,CAACc,UAX3B;AAYL,IAAA,CAAE,GAAElB,MAAO,CAAA,SAAA,CAAX,GAAwB,CAACI,OAAO,CAACe,UAZ5B;AAaL,IAAA,CAAE,GAAEnB,MAAO,CAAA,SAAA,CAAX,GAAwBI,OAAO,CAACe,UAb3B;AAcL,IAAA,CAAE,GAAEnB,MAAO,CAAA,SAAA,CAAX,GAAwB,CAACI,OAAO,CAACgB,UAd5B;AAeL,IAAA,CAAE,GAAEpB,MAAO,CAAA,SAAA,CAAX,GAAwBI,OAAO,CAACgB,UAf3B;AAgBL,IAAA,CAAE,GAAEpB,MAAO,CAAA,UAAA,CAAX,GAAyBI,OAAO,CAACiB,WAhB5B;AAiBL,IAAA,CAAE,GAAErB,MAAO,CAAA,cAAA,CAAX,GAA6B,CAACI,OAAO,CAACiB,WAAAA;GAjBxC,CAAA;AAmBD;;;;"}